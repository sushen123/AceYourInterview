"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-filepond";
exports.ids = ["vendor-chunks/react-filepond"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-filepond/dist/react-filepond.esm.js":
/*!****************************************************************!*\
  !*** ./node_modules/react-filepond/dist/react-filepond.esm.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FilePond: () => (/* binding */ FilePond),\n/* harmony export */   FileStatus: () => (/* reexport safe */ filepond__WEBPACK_IMPORTED_MODULE_1__.FileStatus),\n/* harmony export */   registerPlugin: () => (/* reexport safe */ filepond__WEBPACK_IMPORTED_MODULE_1__.registerPlugin)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var filepond__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! filepond */ \"(ssr)/./node_modules/filepond/dist/filepond.esm.js\");\n/*!\n * react-filepond v7.1.2\n * A handy FilePond adapter component for React\n * \n * Copyright (c) 2022 PQINA\n * https://pqina.nl/filepond\n * \n * Licensed under the MIT license.\n */\n\n\n\n// Import required methods and styles from the FilePond module, should not need anything else\n\n\n// We need to be able to call the registerPlugin method directly so we can add plugins\n\n\n// Do this once\nconst isSupported = (0,filepond__WEBPACK_IMPORTED_MODULE_1__.supported)();\n\n// filtered methods\nconst filteredMethods = [\n  \"setOptions\",\n  \"on\",\n  \"off\",\n  \"onOnce\",\n  \"appendTo\",\n  \"insertAfter\",\n  \"insertBefore\",\n  \"isAttachedTo\",\n  \"replaceElement\",\n  \"restoreElement\",\n  \"destroy\",\n];\n\n// The React <FilePond/> wrapper\nclass FilePond extends (react__WEBPACK_IMPORTED_MODULE_0___default().Component) {\n  constructor(props) {\n    super(props);\n    this.allowFilesSync = true;\n  }\n\n  // Will setup FilePond instance when mounted\n  componentDidMount() {\n    // clone the input so we can restore it in unmount\n    this._input = this._element.querySelector('input[type=\"file\"]');\n    this._inputClone = this._input.cloneNode();\n\n    // exit here if not supported\n    if (!isSupported) return;\n\n    const options = Object.assign({}, this.props);\n\n    // if onupdate files is defined, make sure setFiles does not cause race condition\n    if (options.onupdatefiles) {\n      const cb = options.onupdatefiles;\n      options.onupdatefiles = (items) => {\n        this.allowFilesSync = false;\n        cb(items);\n      };\n    }\n\n    // Create our pond\n    this._pond = (0,filepond__WEBPACK_IMPORTED_MODULE_1__.create)(this._input, options);\n\n    // Reference pond methods to FilePond component instance\n    Object.keys(this._pond)\n      .filter((key) => !filteredMethods.includes(key))\n      .forEach((key) => {\n        this[key] = this._pond[key];\n      });\n  }\n\n  // Will clean up FilePond instance when unmounted\n  componentWillUnmount() {\n    // exit when no pond defined\n    if (!this._pond) return;\n\n    // This fixed <Strict> errors\n\n    // FilePond destroy is async so we have to move FilePond to a bin element so it can no longer affect current element tree as React unmount / mount is sync\n    const bin = document.createElement(\"div\");\n    bin.append(this._pond.element);\n    bin.id = \"foo\";\n\n    // now we call destroy so FilePond can start it's destroy logic\n    this._pond.destroy();\n    this._pond = undefined;\n\n    // we re-add the original file input element so everything is as it was before\n    this._element.append(this._inputClone);\n  }\n\n  shouldComponentUpdate() {\n    if (!this.allowFilesSync) {\n      this.allowFilesSync = true;\n      return false;\n    }\n    return true;\n  }\n\n  // Something changed\n  componentDidUpdate() {\n    // exit when no pond defined\n    if (!this._pond) return;\n\n    const options = Object.assign({}, this.props);\n\n    // this is only set onces, on didmount\n    delete options.onupdatefiles;\n\n    // update pond options based on new props\n    this._pond.setOptions(options);\n  }\n\n  // Renders basic element hook for FilePond to attach to\n  render() {\n    const {\n      id,\n      name,\n      className,\n      allowMultiple,\n      required,\n      captureMethod,\n      acceptedFileTypes,\n    } = this.props;\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(\n      \"div\",\n      {\n        className: \"filepond--wrapper\",\n        ref: (element) => (this._element = element),\n      },\n      (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(\"input\", {\n        type: \"file\",\n        name,\n        id,\n        accept: acceptedFileTypes,\n        multiple: allowMultiple,\n        required: required,\n        className: className,\n        capture: captureMethod,\n      })\n    );\n  }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtZmlsZXBvbmQvZGlzdC9yZWFjdC1maWxlcG9uZC5lc20uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUUwRDs7QUFFMUQ7QUFDeUU7O0FBRXpFO0FBQ3NDOztBQUV0QztBQUNBLG9CQUFvQixtREFBUzs7QUFFN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNPLHVCQUF1Qix3REFBZTtBQUM3QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsb0NBQW9DOztBQUVwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsaUJBQWlCLGdEQUFNOztBQUV2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsb0NBQW9DOztBQUVwQztBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTixXQUFXLG9EQUFhO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLE1BQU0sb0RBQWE7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kZXZlbGV2YXRlLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWZpbGVwb25kL2Rpc3QvcmVhY3QtZmlsZXBvbmQuZXNtLmpzPzc0YjEiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiByZWFjdC1maWxlcG9uZCB2Ny4xLjJcbiAqIEEgaGFuZHkgRmlsZVBvbmQgYWRhcHRlciBjb21wb25lbnQgZm9yIFJlYWN0XG4gKiBcbiAqIENvcHlyaWdodCAoYykgMjAyMiBQUUlOQVxuICogaHR0cHM6Ly9wcWluYS5ubC9maWxlcG9uZFxuICogXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IFJlYWN0LCB7IGNyZWF0ZUVsZW1lbnQsIHVzZUNhbGxiYWNrIH0gZnJvbSBcInJlYWN0XCI7XG5cbi8vIEltcG9ydCByZXF1aXJlZCBtZXRob2RzIGFuZCBzdHlsZXMgZnJvbSB0aGUgRmlsZVBvbmQgbW9kdWxlLCBzaG91bGQgbm90IG5lZWQgYW55dGhpbmcgZWxzZVxuaW1wb3J0IHsgY3JlYXRlLCBzdXBwb3J0ZWQsIHJlZ2lzdGVyUGx1Z2luLCBGaWxlU3RhdHVzIH0gZnJvbSBcImZpbGVwb25kXCI7XG5cbi8vIFdlIG5lZWQgdG8gYmUgYWJsZSB0byBjYWxsIHRoZSByZWdpc3RlclBsdWdpbiBtZXRob2QgZGlyZWN0bHkgc28gd2UgY2FuIGFkZCBwbHVnaW5zXG5leHBvcnQgeyByZWdpc3RlclBsdWdpbiwgRmlsZVN0YXR1cyB9O1xuXG4vLyBEbyB0aGlzIG9uY2VcbmNvbnN0IGlzU3VwcG9ydGVkID0gc3VwcG9ydGVkKCk7XG5cbi8vIGZpbHRlcmVkIG1ldGhvZHNcbmNvbnN0IGZpbHRlcmVkTWV0aG9kcyA9IFtcbiAgXCJzZXRPcHRpb25zXCIsXG4gIFwib25cIixcbiAgXCJvZmZcIixcbiAgXCJvbk9uY2VcIixcbiAgXCJhcHBlbmRUb1wiLFxuICBcImluc2VydEFmdGVyXCIsXG4gIFwiaW5zZXJ0QmVmb3JlXCIsXG4gIFwiaXNBdHRhY2hlZFRvXCIsXG4gIFwicmVwbGFjZUVsZW1lbnRcIixcbiAgXCJyZXN0b3JlRWxlbWVudFwiLFxuICBcImRlc3Ryb3lcIixcbl07XG5cbi8vIFRoZSBSZWFjdCA8RmlsZVBvbmQvPiB3cmFwcGVyXG5leHBvcnQgY2xhc3MgRmlsZVBvbmQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLmFsbG93RmlsZXNTeW5jID0gdHJ1ZTtcbiAgfVxuXG4gIC8vIFdpbGwgc2V0dXAgRmlsZVBvbmQgaW5zdGFuY2Ugd2hlbiBtb3VudGVkXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIC8vIGNsb25lIHRoZSBpbnB1dCBzbyB3ZSBjYW4gcmVzdG9yZSBpdCBpbiB1bm1vdW50XG4gICAgdGhpcy5faW5wdXQgPSB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ2lucHV0W3R5cGU9XCJmaWxlXCJdJyk7XG4gICAgdGhpcy5faW5wdXRDbG9uZSA9IHRoaXMuX2lucHV0LmNsb25lTm9kZSgpO1xuXG4gICAgLy8gZXhpdCBoZXJlIGlmIG5vdCBzdXBwb3J0ZWRcbiAgICBpZiAoIWlzU3VwcG9ydGVkKSByZXR1cm47XG5cbiAgICBjb25zdCBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5wcm9wcyk7XG5cbiAgICAvLyBpZiBvbnVwZGF0ZSBmaWxlcyBpcyBkZWZpbmVkLCBtYWtlIHN1cmUgc2V0RmlsZXMgZG9lcyBub3QgY2F1c2UgcmFjZSBjb25kaXRpb25cbiAgICBpZiAob3B0aW9ucy5vbnVwZGF0ZWZpbGVzKSB7XG4gICAgICBjb25zdCBjYiA9IG9wdGlvbnMub251cGRhdGVmaWxlcztcbiAgICAgIG9wdGlvbnMub251cGRhdGVmaWxlcyA9IChpdGVtcykgPT4ge1xuICAgICAgICB0aGlzLmFsbG93RmlsZXNTeW5jID0gZmFsc2U7XG4gICAgICAgIGNiKGl0ZW1zKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gQ3JlYXRlIG91ciBwb25kXG4gICAgdGhpcy5fcG9uZCA9IGNyZWF0ZSh0aGlzLl9pbnB1dCwgb3B0aW9ucyk7XG5cbiAgICAvLyBSZWZlcmVuY2UgcG9uZCBtZXRob2RzIHRvIEZpbGVQb25kIGNvbXBvbmVudCBpbnN0YW5jZVxuICAgIE9iamVjdC5rZXlzKHRoaXMuX3BvbmQpXG4gICAgICAuZmlsdGVyKChrZXkpID0+ICFmaWx0ZXJlZE1ldGhvZHMuaW5jbHVkZXMoa2V5KSlcbiAgICAgIC5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgdGhpc1trZXldID0gdGhpcy5fcG9uZFtrZXldO1xuICAgICAgfSk7XG4gIH1cblxuICAvLyBXaWxsIGNsZWFuIHVwIEZpbGVQb25kIGluc3RhbmNlIHdoZW4gdW5tb3VudGVkXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIC8vIGV4aXQgd2hlbiBubyBwb25kIGRlZmluZWRcbiAgICBpZiAoIXRoaXMuX3BvbmQpIHJldHVybjtcblxuICAgIC8vIFRoaXMgZml4ZWQgPFN0cmljdD4gZXJyb3JzXG5cbiAgICAvLyBGaWxlUG9uZCBkZXN0cm95IGlzIGFzeW5jIHNvIHdlIGhhdmUgdG8gbW92ZSBGaWxlUG9uZCB0byBhIGJpbiBlbGVtZW50IHNvIGl0IGNhbiBubyBsb25nZXIgYWZmZWN0IGN1cnJlbnQgZWxlbWVudCB0cmVlIGFzIFJlYWN0IHVubW91bnQgLyBtb3VudCBpcyBzeW5jXG4gICAgY29uc3QgYmluID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBiaW4uYXBwZW5kKHRoaXMuX3BvbmQuZWxlbWVudCk7XG4gICAgYmluLmlkID0gXCJmb29cIjtcblxuICAgIC8vIG5vdyB3ZSBjYWxsIGRlc3Ryb3kgc28gRmlsZVBvbmQgY2FuIHN0YXJ0IGl0J3MgZGVzdHJveSBsb2dpY1xuICAgIHRoaXMuX3BvbmQuZGVzdHJveSgpO1xuICAgIHRoaXMuX3BvbmQgPSB1bmRlZmluZWQ7XG5cbiAgICAvLyB3ZSByZS1hZGQgdGhlIG9yaWdpbmFsIGZpbGUgaW5wdXQgZWxlbWVudCBzbyBldmVyeXRoaW5nIGlzIGFzIGl0IHdhcyBiZWZvcmVcbiAgICB0aGlzLl9lbGVtZW50LmFwcGVuZCh0aGlzLl9pbnB1dENsb25lKTtcbiAgfVxuXG4gIHNob3VsZENvbXBvbmVudFVwZGF0ZSgpIHtcbiAgICBpZiAoIXRoaXMuYWxsb3dGaWxlc1N5bmMpIHtcbiAgICAgIHRoaXMuYWxsb3dGaWxlc1N5bmMgPSB0cnVlO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8vIFNvbWV0aGluZyBjaGFuZ2VkXG4gIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICAvLyBleGl0IHdoZW4gbm8gcG9uZCBkZWZpbmVkXG4gICAgaWYgKCF0aGlzLl9wb25kKSByZXR1cm47XG5cbiAgICBjb25zdCBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5wcm9wcyk7XG5cbiAgICAvLyB0aGlzIGlzIG9ubHkgc2V0IG9uY2VzLCBvbiBkaWRtb3VudFxuICAgIGRlbGV0ZSBvcHRpb25zLm9udXBkYXRlZmlsZXM7XG5cbiAgICAvLyB1cGRhdGUgcG9uZCBvcHRpb25zIGJhc2VkIG9uIG5ldyBwcm9wc1xuICAgIHRoaXMuX3BvbmQuc2V0T3B0aW9ucyhvcHRpb25zKTtcbiAgfVxuXG4gIC8vIFJlbmRlcnMgYmFzaWMgZWxlbWVudCBob29rIGZvciBGaWxlUG9uZCB0byBhdHRhY2ggdG9cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIGlkLFxuICAgICAgbmFtZSxcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGFsbG93TXVsdGlwbGUsXG4gICAgICByZXF1aXJlZCxcbiAgICAgIGNhcHR1cmVNZXRob2QsXG4gICAgICBhY2NlcHRlZEZpbGVUeXBlcyxcbiAgICB9ID0gdGhpcy5wcm9wcztcbiAgICByZXR1cm4gY3JlYXRlRWxlbWVudChcbiAgICAgIFwiZGl2XCIsXG4gICAgICB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJmaWxlcG9uZC0td3JhcHBlclwiLFxuICAgICAgICByZWY6IChlbGVtZW50KSA9PiAodGhpcy5fZWxlbWVudCA9IGVsZW1lbnQpLFxuICAgICAgfSxcbiAgICAgIGNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiLCB7XG4gICAgICAgIHR5cGU6IFwiZmlsZVwiLFxuICAgICAgICBuYW1lLFxuICAgICAgICBpZCxcbiAgICAgICAgYWNjZXB0OiBhY2NlcHRlZEZpbGVUeXBlcyxcbiAgICAgICAgbXVsdGlwbGU6IGFsbG93TXVsdGlwbGUsXG4gICAgICAgIHJlcXVpcmVkOiByZXF1aXJlZCxcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgICAgIGNhcHR1cmU6IGNhcHR1cmVNZXRob2QsXG4gICAgICB9KVxuICAgICk7XG4gIH1cbn1cblxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-filepond/dist/react-filepond.esm.js\n");

/***/ })

};
;